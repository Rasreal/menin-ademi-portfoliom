import { useEffect, useRef, useState } from "react";
import "./portfolio.css";
import { motion, useInView, useScroll, useTransform } from "motion/react";

const items = [
  {
    id: 1,
    img: "/project1.png",
    title: "Full Stack B√∂lisAI Application",
    desc: "–ë“±–ª AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è–ª–∞–Ω“ì–∞–Ω “±—Å—ã–Ω—ã—Å—Ç–∞—Ä–¥—ã –±”©–ª—ñ—Å—É –∂”ô–Ω–µ –∑–µ—Ä—Ç—Ç–µ—É “Ø—à—ñ–Ω –∂–∞—Å–∞–ª“ì–∞–Ω —Ñ—É–ª–ª—Å—Ç–µ–∫ –≤–µ–±-“õ–æ—Å—ã–º—à–∞—Å—ã. –û–ª –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ AI“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω –ø—Ä–æ–º–ø—Ç—Ç–∞—Ä–¥—ã “õ“±—Ä—É“ì–∞, —Å–∞“õ—Ç–∞—É“ì–∞ –∂”ô–Ω–µ –∑–µ—Ä—Ç—Ç–µ—É–≥–µ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ–¥—ñ. –ó–∞–º–∞–Ω–∞—É–∏ –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä–º–µ–Ω –∂–∞—Å–∞–ª“ì–∞–Ω –±“±–ª “õ–æ—Å—ã–º—à–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ —ã“£“ì–∞–π–ª—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—Ç—ñ “õ–∞–º—Ç–∞–º–∞—Å—ã–∑ –µ—Ç—ñ–ø, —Ç–∏—ñ–º–¥—ñ —ñ–∑–¥–µ—É, —Å–∞–Ω–∞—Ç—Ç–∞—É –∂”ô–Ω–µ ”©–∑–∞—Ä–∞ ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Å—É –º“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä—ñ–Ω “±—Å—ã–Ω–∞–¥—ã. ",
    link: "https://share-ai-prompt-alpha.vercel.app/",
  },
  {
    id: 2,
    img: "/project2.png",
    title: "Justube (Youtube –±–∞–ª–∞–º–∞—Å—ã)",
    desc: "Justube ‚Äì –±“±–ª YouTube-—Ç—ñ“£ –±–∞–ª–∞–º–∞—Å—ã —Ä–µ—Ç—ñ–Ω–¥–µ –∂–∞—Å–∞–ª“ì–∞–Ω –≤–∏–¥–µ–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞. –û–ª –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ –≤–∏–¥–µ–æ–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç–µ—É–≥–µ, –∫”©—Ä—É–≥–µ –∂”ô–Ω–µ –±”©–ª—ñ—Å—É–≥–µ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ–¥—ñ. “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–ø–∞–ª—ã –∫–æ–Ω—Ç–µ–Ω—Ç –∂–∞—Å–∞–ø, ”©–∑ –∞—É–¥–∏—Ç–æ—Ä–∏—è—Å—ã–Ω “õ–∞–ª—ã–ø—Ç–∞—Å—Ç—ã—Ä–∞ –∞–ª–∞–¥—ã. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —ã“£“ì–∞–π–ª—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∑–∞–º–∞–Ω–∞—É–∏ –¥–∏–∑–∞–π–Ω –∂”ô–Ω–µ –∂—ã–ª–¥–∞–º –∂“±–º—ã—Å —ñ—Å—Ç–µ—É –º“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä—ñ–Ω “±—Å—ã–Ω–∞–¥—ã. üöÄ",
    link: "https://just-tube.netlify.app/",
  },
  {
    id: 3,
    img: "/project3.png",
    title: "Simple CRUD Full-Stack Application",
    desc: "–ë“±–ª –∂–æ–±–∞ Supabase, Express, Prisma, Node.js, React, –∂”ô–Ω–µ TypeScript “õ–æ–ª–¥–∞–Ω–∞ –æ—Ç—ã—Ä—ã–ø, –∂–∞–∑–±–∞–ª–∞—Ä–¥—ã “õ–æ—Å—É, ”©“£–¥–µ—É, –∂–æ—é –∂”ô–Ω–µ “õ–∞—Ä–∞—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ–Ω –±–µ—Ä–µ—Ç—ñ–Ω —Ç–æ–ª—ã“õ“õ–∞–Ω–¥—ã CRUD –≤–µ–±-“õ–æ—Å—ã–º—à–∞—Å—ã. Frontend (React, TypeScript) –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–Ω “õ–∞–º—Ç–∞–º–∞—Å—ã–∑ –µ—Ç—Å–µ, Backend (Express, Node.js, Prisma) –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ ”©“£–¥–µ–ø, Supabase –∞—Ä“õ—ã–ª—ã PostgreSQL –¥–µ—Ä–µ–∫“õ–æ—Ä—ã–Ω–∞ —Ç—ñ–∫–µ–ª–µ–π “õ–æ—Å—ã–ª–∞–¥—ã",
    link: "https://github.com/Rasreal/fullstack-notes",
  },
  {
    id: 4,
    img: "/project4.png",
    title: "WebRTC “õ–æ–ª–¥–∞–Ω—ã–ª“ì–∞–Ω, “õ–∞—Ä–∞–ø–∞–π—ã–º GoogleMeet –±–∞–ª–∞–º–∞—Å—ã QazirMeet",
    desc: "QazirMeet ‚Äì WebRTC, React, TypeScript, Node.js, –∂”ô–Ω–µ Express —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä—ã–Ω “õ–æ–ª–¥–∞–Ω–∞ –æ—Ç—ã—Ä—ã–ø –∂–∞—Å–∞–ª“ì–∞–Ω “õ–∞—Ä–∞–ø–∞–π—ã–º –±–µ–π–Ω–µ“õ–æ“£—ã—Ä–∞—É “õ–æ—Å—ã–º—à–∞—Å—ã. –ë“±–ª –∂“Ø–π–µ Google Meet –±–∞–ª–∞–º–∞—Å—ã —Ä–µ—Ç—ñ–Ω–¥–µ –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø, –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ –±—Ä–∞—É–∑–µ—Ä –∞—Ä“õ—ã–ª—ã –±–µ–π–Ω–µ –∂”ô–Ω–µ –∞—É–¥–∏–æ “õ–æ“£—ã—Ä–∞—É–ª–∞—Ä –∂“Ø—Ä–≥—ñ–∑—É–≥–µ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ–¥—ñ. WebRTC –∞—Ä“õ–∞—Å—ã–Ω–¥–∞ “õ–æ—Å—ã–º—à–∞ —Ç—ñ–∫–µ–ª–µ–π P2P (peer-to-peer) –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω –æ—Ä–Ω–∞—Ç—ã–ø, –∂—ã–ª–¥–∞–º ”ô—Ä—ñ “õ–∞—É—ñ–ø—Å—ñ–∑ –±–∞–π–ª–∞–Ω—ã—Å “±—Å—ã–Ω–∞–¥—ã.",
    link: "https://github.com/Rasreal/QazirMeet",
  },
  {
    id: 5,
    img: "/p5.jpg",
    title: "Animated Portfolio Website",
    desc: "–î”ô–ª –æ—Å—ã —Å—ñ–∑ –∫”©—Ä—ñ–ø –∂–∞—Ç“õ–∞–Ω –≤–µ–±—Å–∞–π—Ç. Framer Motion –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Å—ã –∞—Ä“õ—ã–ª—ã –∂–∞—Å–∞–ª—ã–Ω“ì–∞–Ω, ”ô–¥–µ–º—ñ –∞–Ω–∏–º–∞—Ü–∏—è–ª–∞–Ω“ì–∞–Ω –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. ",
    link: "/",
  },
];

const imgVariants = {
  initial: {
    x: -500,
    y: 500,
    opacity: 0,
  },
  animate: {
    x: 0,
    y: 0,
    opacity: 1,
    transition: {
      duration: 0.5,
      ease: "easeInOut",
    },
  },
};

const textVariants = {
  initial: {
    x: 500,
    y: 500,
    opacity: 0,
  },
  animate: {
    x: 0,
    y: 0,
    opacity: 1,
    transition: {
      duration: 0.5,
      ease: "easeInOut",
      staggerChildren: 0.05,
    },
  },
};

const ListItem = ({ item }) => {
  const ref = useRef();

  const isInView = useInView(ref, { margin: "-100px" });

  return (
    <div className="pItem" ref={ref}>
      <motion.div
        variants={imgVariants}
        animate={isInView ? "animate" : "initial"}
        className="pImg"
      >
        <img src={item.img} alt="" />
      </motion.div>
      <motion.div
        variants={textVariants}
        animate={isInView ? "animate" : "initial"}
        className="pText"
      >
        <motion.h1 variants={textVariants}>{item.title}</motion.h1>
        <motion.p variants={textVariants}>{item.desc}</motion.p>
        <motion.a variants={textVariants} href={item.link}>
          <button>–ñ–æ–±–∞–Ω—ã “ö–∞—Ä–∞—É</button>
        </motion.a>
      </motion.div>
    </div>
  );
};

const Portfolio = () => {
  const [containerDistance, setContainerDistance] = useState(0);
  const ref = useRef(null);

  // useEffect(() => {
  //   if (ref.current) {
  //     const rect = ref.current.getBoundingClientRect();
  //     setContainerDistance(rect.left);
  //   }
  // }, []);

  // FIX: Re-calculate when screen size changes
  useEffect(() => {
    const calculateDistance = () => {
      if (ref.current) {
        const rect = ref.current.getBoundingClientRect();
        setContainerDistance(rect.left);
      }
    };

    calculateDistance();

    window.addEventListener("resize", calculateDistance);

    return () => {
      window.removeEventListener("resize", calculateDistance);
    };
  }, []);

  const { scrollYProgress } = useScroll({ target: ref });

  const xTranslate = useTransform(
    scrollYProgress,
    [0, 1],
    [0, -window.innerWidth * items.length]
  );

  return (
    <div className="portfolio" ref={ref}>
      <motion.div className="pList" style={{ x: xTranslate }}>
        <div
          className="empty"
          style={{
            width: window.innerWidth - containerDistance,
            // backgroundColor: "pink",
          }}
        />
        {items.map((item) => (
          <ListItem item={item} key={item.id} />
        ))}
      </motion.div>
      <section />
      <section />
      <section />
      <section />
      <section />
      <div className="pProgress">
        <svg width="100%" height="100%" viewBox="0 0 160 160">
          <circle
            cx="80"
            cy="80"
            r="70"
            fill="none"
            stroke="#ddd"
            strokeWidth={20}
          />
          <motion.circle
            cx="80"
            cy="80"
            r="70"
            fill="none"
            stroke="#dd4c62"
            strokeWidth={20}
            style={{ pathLength: scrollYProgress }}
            transform="rotate(-90 80 80)"
          />
        </svg>
      </div>
    </div>
  );
};

export default Portfolio;
